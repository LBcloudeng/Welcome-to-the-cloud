AWSTemplateFormatVersion: 2010-09-09

Description: This Cloudformation Lab creates a VPC with a load balancer for EC2 instances in two Availability Zones.

Metadata:
  AWS::CloudFormation::Interface: 
    ParameterGroups:
      - 
        Label: 
          default: "Certificate Arn"
        Parameters:
          - AWSCertificate
      - 
        Label: 
          default: "Export VPC Stack Name"
        Parameters:
          - ExportVpcStackName
      - 
        Label: 
          default: "EC2 Parameters"
        Parameters:
          - AmazonImageID
          - InstanceType
          - KeyName

Parameters:
  AWSCertificate:
    Description: The ARN of the AWS Certification Manager's Certificate 
    Type: String
  ExportVpcStackName:
    Description: The name of the vpc stack that exports values
    Type: String

Mappings:
  RegionMap:
    us-east-1:
     "AMI": "ami-0c02fb55956c7d316"
    Us-east-2:
     "AMI": "ami-064ff912f78e3e561"

Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16 
      EnableDnsSupport: 'true'
      EnableDnsHostnames: 'true'
      Tags:
        - Key: Name
          Value: CF Project
          
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: CF Project

  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC
  
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock: 10.0.10.0/24
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: CF Project Public Subnet (AZ1)

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 1, !GetAZs  '' ]
      CidrBlock: 10.0.20.0/24
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: CF Project Public Subnet (AZ2)

  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 0, !GetAZs  '' ]
      CidrBlock: 10.0.30.0/24
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: CF Project Private Subnet (AZ1)

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 1, !GetAZs  '' ]
      CidrBlock: 10.0.40.0/24
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: CF Project Private Subnet (AZ2)

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: CF Project Public Routes

  DefaultPublicRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet1

  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet2
  
  WebServerSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Enable HTTP from 0.0.0.0/0
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
          CidrIp: 0.0.0.0/0
      VpcId: !Ref VPC
  
  EC2Instance1:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !FindInMap [RegionMap, !Ref "AWS::Region", AMI]
      InstanceType: t2.micro
      SubnetId: !Ref PublicSubnet1
      SecurityGroupIds: 
        - !Ref WebServerSecurityGroup
      Tags:
       - Key: Name
         Value: CF Project EC2 1   
      UserData:
        Fn::Base64: !Sub |
            #!/bin/bash
            yum install httpd -y
            service httpd start  
            echo "<html><body><h1>Welcome Techies to my cloudformation lab in Region ${AWS::Region}<h1></body></html>" > /var/www/html/index.html
  
  EC2Instance2:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !FindInMap [RegionMap, !Ref "AWS::Region", AMI]
      InstanceType: t2.micro
      SubnetId: !Ref PublicSubnet2
      SecurityGroupIds: 
        - !Ref WebServerSecurityGroup
      Tags:
       - Key: Name
         Value: CF Project EC2 2    
      UserData:
        Fn::Base64: !Sub |
            #!/bin/bash
            yum install httpd -y
            service httpd start  
            echo "<html><body><h1>Welcome Techies to my cloudformation lab in Region ${AWS::Region}<h1></body></html>" > /var/www/html/index.html
  
  ApplicationLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: MyApplicationLoadBalancer
      Subnets: 
      - !Ref PublicSubnet1
      - !Ref PublicSubnet2

  ALBListenerNoSslCertificate:
    Type: 'AWS::ElasticLoadBalancingV2::Listener'
    Properties:
      DefaultActions:
        - RedirectConfig:
            Host: '#{host}'
            Path: '/#{path}'
            Port: '443'
            Protocol: HTTPS
            StatusCode: HTTP_301
          Type: redirect 
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      Port: 80
      Protocol: HTTP 

  ALBListenerSslCertificate:
    Type : AWS::ElasticLoadBalancingV2::Listener
    Properties:
      Certificates:
        - CertificateArn: !Ref AWSCertificate
      DefaultActions:
        - Type: forward 
          TargetGroupArn: !Ref ALBTargetGroup
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      Port: 443
      Protocol: HTTPS

  ALBTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 10
      HealthCheckPath: /
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      Matcher:
        HttpCode: 200,302
      Name: MyWebServers
      Port: 80
      Protocol: HTTP
      Targets:
        - Id: !Ref EC2Instance1
          Port: 80
        - Id: !Ref EC2Instance2
          Port: 80
      TargetType: instance
      UnhealthyThresholdCount: 5
      VpcId:
        !Ref VPC

Outputs:
  PublicIp:
    Description: EC2 Instance 1 Public Ip
    Value: !GetAtt EC2Instance1.PublicIp 
    Description: EC2 Instance 2 Public Ip
    Value: !GetAtt EC2Instance2.PublicIp 

